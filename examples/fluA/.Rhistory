}
# mm <- .7
# dd <- .2
# pars <- elicit_beta_median_iq(m = mm, d = dd)
# qbeta(.5, shape1 = pars$a, shape2 = pars$b)
# qbeta(.9, shape1 = pars$a, shape2 = pars$b)
# curve(dbeta(x,shape1 = pars$a, shape2 = pars$b), lwd = 2)
get_parameter_vectors_median_iq <- function(iq_correct,
iq_wrong = c(.15, .25, .35, .45) ){
pars_0 <- elicit_beta_median_iq(m = .5, iq = iq_wrong[1])
pars_1 <- elicit_beta_mean_cv(m0 = .5, iq = iq_wrong[2])
pars_2 <- elicit_beta_mean_cv(m0 = .5, iq = iq_correct) # big shot
pars_3 <- elicit_beta_mean_cv(m0 = .5, iq = iq_wrong[3])
pars_4 <- elicit_beta_mean_cv(m0 = .5, iq = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
get_parameter_vectors_median_iq(iq_correct = .1)
## Here is a simple method-of-moments based elicitation procedure for the Beta distribution.
## This function will take either
## (i) prior mean and variance m_0 and v_0, respectively, or;
## (ii) prior mean and coefficient of variation m_0 and c, respectively.
elicit_beta_mean_cv <- function(m0, v0 = NULL, cv = 1){
if(!is.null(v0)){
a <- -(m0*v0 + m0^3 - m0^2)/v0
b <- ((m0-1)*v0 + m0^3 - 2*m0^2 + m0)/v0
}else{
a <- -(m0*(cv*m0)^2 + m0^3 - m0^2)/(cv*m0)^2
b <- ((m0-1)*(cv*m0)^2 + m0^3 - 2*m0^2 + m0)/(cv*m0)^2
}
if(a < 0 || b <0) warning("Warning: at least one of the obtained parameters is not valid")
return(list(a = a, b = b))
}
##
# Testing
# m <- .15
# v <- 0.019
# c0 <- 2
# elicit_beta_mean_cv(m0 = m, v0 = v)
# elicit_beta_mean_cv(m0 = m, cv = c0)
get_parameter_vectors_mean_cv <- function(cv_correct, cv_wrong = .1){
pars_0 <- elicit_beta_mean_cv(m0 = .1, cv = cv_wrong)
pars_1 <- elicit_beta_mean_cv(m0 = .2, cv = cv_wrong)
pars_2 <- elicit_beta_mean_cv(m0 = .5, cv = cv_correct) # big shot
pars_3 <- elicit_beta_mean_cv(m0 = .8, cv = cv_wrong)
pars_4 <- elicit_beta_mean_cv(m0 = .9, cv = cv_wrong)
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
elicit_beta_median_iq <- function(m, d, q = .90){
u <- m + d
loss <- function(x){
a <- x[1]
b <- x[2]
m.hat <- qbeta(.5, shape1 = a, shape2 = b)
u.hat <- qbeta(q, shape1 = a, shape2 = b)
error <- .5 * (m.hat - m)^2 + .5*(u.hat-u)^2
return(error)
}
opt <- suppressWarnings( optim(loss, par = c(1, 1)) )
a <- opt$par[1]
b <- opt$par[2]
if(a < 0 || b <0) warning("Warning: at least one of the obtained parameters is not valid")
return(list(a = a, b = b))
}
# mm <- .7
# dd <- .2
# pars <- elicit_beta_median_iq(m = mm, d = dd)
# qbeta(.5, shape1 = pars$a, shape2 = pars$b)
# qbeta(.9, shape1 = pars$a, shape2 = pars$b)
# curve(dbeta(x,shape1 = pars$a, shape2 = pars$b), lwd = 2)
get_parameter_vectors_median_iq <- function(iq_correct,
iq_wrong = c(.15, .25, .35, .45) ){
pars_0 <- elicit_beta_median_iq(m = .5, q = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = .5, q = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = .5, q = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = .5, q = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = .5, q = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
plot_densities <- function(pars){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
}
get_parameter_vectors_median_iq(iq_correct = .1)
get_parameter_vectors_median_iq <- function(iq_correct,
iq_wrong = c(.15, .25, .35, .45) ){
pars_0 <- elicit_beta_median_iq(m = .5, d = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = .5, d = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = .5, d = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = .5, d = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = .5, d = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
plot_densities <- function(pars){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
}
get_parameter_vectors_median_iq(iq_correct = .1)
plot_densities(get_parameter_vectors_median_iq(iq_correct = .1))
get_parameter_vectors_median_iq <- function(iq_correct,
iq_wrong = c(.1, .15, .25, .35) ){
pars_0 <- elicit_beta_median_iq(m = .5, d = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = .5, d = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = .5, d = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = .5, d = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = .5, d = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
plot_densities(get_parameter_vectors_median_iq(iq_correct = .05))
get_parameter_vectors_median_iq(iq_correct = .05)
elicit_beta_median_iq <- function(m, d, q = .90){
u <- m + d
loss <- function(x){
a <- x[1]
b <- x[2]
m.hat <- qbeta(.5, shape1 = a, shape2 = b)
u.hat <- qbeta(q, shape1 = a, shape2 = b)
error <- .5 * (m.hat - m)^2 + .5*(u.hat-u)^2
return(error)
}
opt <- suppressWarnings( optim(loss, par = c(1, 1), lower = c(0, 0)) )
a <- opt$par[1]
b <- opt$par[2]
if(a < 0 || b <0) warning("Warning: at least one of the obtained parameters is not valid")
return(list(a = a, b = b))
}
# mm <- .7
# dd <- .2
# pars <- elicit_beta_median_iq(m = mm, d = dd)
# qbeta(.5, shape1 = pars$a, shape2 = pars$b)
# qbeta(.9, shape1 = pars$a, shape2 = pars$b)
# curve(dbeta(x,shape1 = pars$a, shape2 = pars$b), lwd = 2)
get_parameter_vectors_median_iq <- function(iq_correct,
iq_wrong = c(.1, .15, .25, .35) ){
pars_0 <- elicit_beta_median_iq(m = .5, d = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = .5, d = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = .5, d = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = .5, d = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = .5, d = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
plot_densities <- function(pars){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
}
get_parameter_vectors_median_iq <- function(iq_correct,
iq_wrong = c(.0125, .025, .05, .1) ){
pars_0 <- elicit_beta_median_iq(m = .5, d = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = .5, d = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = .5, d = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = .5, d = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = .5, d = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
plot_densities <- function(pars){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
}
get_parameter_vectors_median_iq(iq_correct = .005)
plot_densities(get_parameter_vectors_median_iq(iq_correct = .005))
get_parameter_vectors_median_iq <- function(med = 0.5,
iq_correct,
iq_wrong = c(.0125, .025, .05, .1) ){
pars_0 <- elicit_beta_median_iq(m = med, d = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = med, d = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = med, d = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = med, d = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = med, d = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
plot_densities <- function(pars){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
}
plot_densities(get_parameter_vectors_median_iq(iq_correct = .005))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .005, med = .8))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .005, med = .7))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .15, med = .7))
plot_densities <- function(pars, lg = TRUE){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
if(lg){
legend(x = "top", col = 1:K, lwd = 2, lty = 1, bty = 'n', legend = paste("Expert_", 1:K, sep = "") )
}
}
plot_densities(get_parameter_vectors_median_iq(iq_correct = .15, med = .7))
plot_densities <- function(pars, lg = TRUE){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
if(lg){
legend(x = "top", col = 1:K, lwd = 2, lty = 1, bty = 'n', legend = paste("Expert_", (1:K)-1, sep = "") )
}
}
plot_densities(get_parameter_vectors_median_iq(iq_correct = .15, med = .7))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .25, med = .7))
mm <- .7
dd <- .25
pars <- elicit_beta_median_iq(m = mm, d = dd)
qbeta(.5, shape1 = pars$a, shape2 = pars$b)
qbeta(.9, shape1 = pars$a, shape2 = pars$b)
curve(dbeta(x,shape1 = pars$a, shape2 = pars$b), lwd = 2)
plot_densities(get_parameter_vectors_median_iq(iq_correct = .25, med = .3))
get_parameter_vectors_median_iq(iq_correct = .25, med = .3)
elicit_beta_median_iq <- function(m, d, q = .90){
u <- m + d
loss <- function(x){
a <- x[1]
b <- x[2]
m.hat <- qbeta(.5, shape1 = a, shape2 = b)
u.hat <- qbeta(q, shape1 = a, shape2 = b)
error <- .5 * (m.hat - m)^2 + .5*(u.hat-u)^2
return(error)
}
opt <- suppressWarnings( optim(loss, par = c(1, 1), lower = c(1E-3, 1E-3)) )
a <- opt$par[1]
b <- opt$par[2]
if(a < 0 || b <0) warning("Warning: at least one of the obtained parameters is not valid")
return(list(a = a, b = b))
}
# mm <- .7
# dd <- .25
# pars <- elicit_beta_median_iq(m = mm, d = dd)
# qbeta(.5, shape1 = pars$a, shape2 = pars$b)
# qbeta(.9, shape1 = pars$a, shape2 = pars$b)
# curve(dbeta(x,shape1 = pars$a, shape2 = pars$b), lwd = 2)
get_parameter_vectors_median_iq <- function(med = 0.5,
iq_correct,
iq_wrong = c(.0125, .025, .05, .1) ){
pars_0 <- elicit_beta_median_iq(m = med, d = iq_wrong[1])
pars_1 <- elicit_beta_median_iq(m = med, d = iq_wrong[2])
pars_2 <- elicit_beta_median_iq(m = med, d = iq_correct) # big shot
pars_3 <- elicit_beta_median_iq(m = med, d = iq_wrong[3])
pars_4 <- elicit_beta_median_iq(m = med, d = iq_wrong[4])
av <- unlist( c(pars_0[1], pars_1[1], pars_2[1], pars_3[1], pars_4[1]) )
bv <- unlist( c(pars_0[2], pars_1[2], pars_2[2], pars_3[2], pars_4[2]) )
return(list(
av = as.numeric(av),
bv = as.numeric(bv)
))
}
#
plot_densities <- function(pars, lg = TRUE){
av <- pars$av
bv <- pars$bv
K <- length(av)
curve(dbeta(x, av[1], bv[1]), lwd = 2)
for(k in 2:K){
curve(dbeta(x, av[k], bv[k]), lwd = 2, col = k, add = TRUE)
}
if(lg){
legend(x = "top", col = 1:K, lwd = 2, lty = 1, bty = 'n', legend = paste("Expert_", (1:K)-1, sep = "") )
}
}
get_parameter_vectors_median_iq(iq_correct = .25, med = .3)
plot_densities(get_parameter_vectors_median_iq(iq_correct = .25, med = .3))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .2, med = .3))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .12, med = .3))
get_parameter_vectors_median_iq(iq_correct = .25, med = .3)
get_parameter_vectors_median_iq(iq_correct = .12, med = .3)
get_parameter_vectors_median_iq(iq_correct = .12, med = .4)
plot_densities(get_parameter_vectors_median_iq(iq_correct = .12, med = .4))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .2, med = .4))
get_parameter_vectors_median_iq(iq_correct = .2, med = .4)
rank(1:5)
rank(1:5)[2]
get_parameter_vectors_median_iq(iq_correct = .4, med = .4)
plot(get_parameter_vectors_median_iq(iq_correct = .4, med = .4))
plot_densities(get_parameter_vectors_median_iq(iq_correct = .4, med = .4))
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/fluA-GTR-W4_InvGamma.stan")
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/integrated_prior.stan")
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/integrated_prior.stan")
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/integrated_prior.stan")
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/integrated_prior.stan")
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/integrated_prior.stan")
rstan:::rstudio_stanc("DUMP/phylostan/examples/fluA/integrated_prior.stan")
setwd("~/DUMP/phylostan/examples/fluA")
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
compiled.model <- stan_model("integrated_prior.stan")
expose_stan_functions(compiled.model)
integrated_density(t = 0, choose(5, 2), u = 1000)
integrated_density(t = 2, choose(5, 2), u = 1000)
integrated_density(t = 2, choose(5, 2), u = 10)
integrated_density(t = .2, choose(5, 2), u = 1000)
integrated_density(t = .2, kappa = choose(5, 2), u = 1000)
u <- 1000
kappa <- choose(10, 2)
kappa <- choose(5, 2)
t <- 2
square <- function(x) x*x
2 *square(u + kappa * t) + 4*kappa*t*u + 3*square(kappa*t) - 3*log(kappa*t) * square(u + kappa * t) - 3 * square(u + kappa*t);
Sum = 2 *square(u + kappa * t) + 4*kappa*t*u + 3*square(kappa*t) - 3*log(kappa*t) * square(u + kappa * t) - 3 * square(u + kappa*t);
k <- 2
# ff <- function(time, n, theta){
#   delta <- choose(n, 2)* time
#   return(theta^-2 * exp(-delta/theta))
# }
#
# integrate(function(x) ff(time = tk, n = k, theta = x), 0, Inf) ## confirming
# 1/(choose(k, 2)*tk)
###############
# alpha <- 1.2
# beta <- 2
# ff <- function(time, n, theta){
#   delta <- choose(n, 2)* time
#   return(theta^-1 * exp(-delta/theta) * MCMCpack::dinvgamma(theta, shape = alpha, scale = beta))
# }
# tk <- 1.5
# integrate(function(x) ff(time = tk, n = k, theta = x), 0, Inf) ## confirming
# (alpha * beta^alpha)/(choose(k, 2)*tk + beta)^{alpha + 1} ## correct
################
marginal_Jeffreys <- function(tt, n){
2/(n*(n-1)*tt)
}
marginal_Jeffreys <- Vectorize(marginal_Jeffreys)
###
marginal_invgamma <- function(tt, n, a, b){
choose(n, 2)*(a * b^a)/(choose(n, 2)*tt + b)^{a + 1}
}
marginal_invgamma <- Vectorize(marginal_invgamma)
###
marginal_lognormal <- function(tt, n, mu0 = 0, sd0 = 1){
fn <- function(time, theta, log = FALSE){
delta <- choose(n, 2)* time
dens <- -log(theta) -delta/theta + dlnorm(x = theta, mu0, sd0, log = TRUE)
if(!log) dens <- exp(dens)
return(dens)
}
integrate(function(x) fn(time = tt, theta = x), 0, Inf)$value
}
marginal_lognormal <- Vectorize(marginal_lognormal)
marginal_lognormal_normalised <- function(tt, n, mu0 = 0, sd0 = 1){
norm_const <- integrate(function(x) marginal_lognormal(x, n, mu0, sd0),
0, Inf)$value
ans <- marginal_lognormal(tt, n, mu0, sd0)
return(ans/norm_const)
}
marginal_lognormal_normalised <- Vectorize(marginal_lognormal_normalised)
#################
#################
curve(marginal_Jeffreys(x, n = k), 0, 50,
main = paste("k =", k),
lwd = 2, xlab = expression(t[k]), ylab = "Density")
curve(marginal_invgamma(x, n = k, a = 1.2, b = 2), col = 3, add = TRUE)
curve(marginal_lognormal_normalised(x, n = k, mu0 = -0.004975165, sd0 = 2.14823),
0, 50, add = TRUE, col = 2, lty = 2, lwd = 2)## mean Ne = 10, sd = 100
int_density <- function(t, kappa, u, log = FALSE){
z <- kappa*t
w <- square(z + u)
lnum  <- log(
2*w*log(u + z) + 3*square(z) + 4*u*z - w*(2*log(z) + 3)
)
ldenom <- log(2) + log(w)
ans <- log(2) + log(kappa) +  lnum - ldenom
if(!log) ans <- exp(ans)
return(ans)
}
int_density(t= 2, kappa = choose(5, 2), u = 1000)
square <- function(x) x*x
int_density <- function(t, kappa, u, log = FALSE){
z <- kappa*t
w <- square(z + u)
lnum  <- log(
2*w*log(u + z) + 3*square(z) + 4*u*z - w*(2*log(z) + 3)
)
ldenom <- log(2) + log(w)
ans <- log(2) + log(kappa) +  lnum - ldenom
if(!log) ans <- exp(ans)
return(ans)
}
int_density(t= 2, kappa = choose(5, 2), u = 1000)
int_density <- Vectorize(int_density)
int_density(t= 2, kappa = choose(5, 2), u = 1000)
curve(int_density(x, kappa = choose(5, 2), u = 1000), 0, 1000)
integrate(int_density(x, kappa = choose(5, 2), u = 1000), 0, Inf)
integrate(function(x) int_density(x, kappa = choose(5, 2), u = 1000), 0, Inf)
choose(5, 2)
square <- function(x) x*x
int_density <- function(t, kappa, u, log = FALSE){
z <- kappa*t
w <- square(z + u)
lnum  <- log(
2*w*log(u + z) + 3*square(z) + 4*u*z - w*(2*log(z) + 3)
)
ldenom <- log(2) + log(w)
ans <- log(2) + log(kappa) +  lnum - ldenom
if(!log) ans <- exp(ans)
return(ans)
}
int_density <- Vectorize(int_density)
int_density(t = 2, kappa = choose(5, 2), u = 1000)
curve(int_density(x, kappa = choose(5, 2), u = 1000), 0, 1000)
integrate(function(x) int_density(x, kappa = choose(5, 2), u = 1000), 0, Inf)
integrate(function(x) int_density(x, kappa = choose(5, 2), u = 10), 0, Inf)
square <- function(x) x*x
int_density <- function(t, kappa, u, log = FALSE){
z <- kappa*t
w <- square(z + u)
lnum  <- log(
2*w*log(u + z) + 3*square(z) + 4*u*z - w*(2*log(z) + 3)
)
ldenom <- log(2) + log(w)
ans <- log(2) + log(kappa) +  lnum - ldenom -log(u)
if(!log) ans <- exp(ans)
return(ans)
}
int_density <- Vectorize(int_density)
int_density(t = 2, kappa = choose(5, 2), u = 1000)
curve(int_density(x, kappa = choose(5, 2), u = 1000), 0, 1000)
integrate(function(x) int_density(x, kappa = choose(5, 2), u = 10), 0, Inf)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
compiled.model <- stan_model("integrated_prior.stan")
expose_stan_functions(compiled.model)
integrated_density(t = 0, kappa = choose(5, 2), u = 1000)
integrated_density(t = 1, kappa = choose(5, 2), u = 1000)
integrated_density(t = 10, kappa = choose(5, 2), u = 1000)
integrated_density(t = 100, kappa = choose(5, 2), u = 1000)
curve(integrated_density(t = x, kappa = choose(5, 2), u = 1000), 0, 1000)
curve(function(x) integrated_density(t = x, kappa = choose(5, 2), u = 1000), 0, 1000)
curve(fn, 0, 1000)
fn <- function(x) integrated_density(t = x, kappa = choose(5, 2), u = 1000); fn <- Vectorize(fn)
curve(fn, 0, 1000)
lfn <- function(x) integrated_density(t = x, kappa = choose(5, 2), u = 1000); fn <- Vectorize(fn)
fn <- function(x) exp(lfn(x)); fn <- Vectorize(fn)
fn <- function(x) exp(lfn(x)); fn <- Vectorize(fn)
integrate(fn, 0, Inf)
rstan:::rstudio_stanc("~/DUMP/phylostan/examples/fluA/fluA-GTR-W4.stan")
rstan:::rstudio_stanc("~/DUMP/phylostan/examples/fluA/fluA-GTR-W4.stan")
rstan:::rstudio_stanc("~/DUMP/phylostan/examples/fluA/fluA-GTR-W4.stan")
